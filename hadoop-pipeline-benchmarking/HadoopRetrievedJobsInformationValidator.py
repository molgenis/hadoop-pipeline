#!/user/bin/env python3
"""
Name: HadoopRetrievedJobsInformationValidator.py
Usage:
	HadoopRetrievedJobsInformationValidator.py <dir>

Description:
	Validates a directory containing job subdirectories (as created by the
	HadoopJobInformationRetriever.py) whether each job has all files that
	should have been retrieved. If files are missing, prints these filenames
	to stdout. Note that the output has been slightly stylized so that the
	output is more readable (meaning the output should not be simply piped
	as if only complete file paths are expected).
"""

import sys
import os
import json
import objectpath # installation: see http://objectpath.org/
# install pypz3 for warning from objectpath to disappear: pip3 install pytz

def main():
	"""
	Name:
		main
		
	Info:
		Runs the main application.
	"""
	
	# Generate required variables from user-input.
	jobsDir = sys.argv[1].rstrip('/') + '/'
	
	print('Starting validation.' + os.linesep)
	
	# Per job directory, validates if all expected files are present.
	for dirPath, subDirs, files in os.walk(jobsDir):
		
		# Retrieves name of last dir (containing the job id).
		baseDir = os.path.basename(dirPath)
		
		# If current dir is a job dir, validates files in it.
		if baseDir.startswith('job_'):
			# Prints job id.
			print('### ' + baseDir)
			
			# Validates if basic files are present.
			# Uses tasks_info for validating individual tasks, so if that
			# one is missing no individual task file validation is done.
			if not os.path.isfile(dirPath + '/job_info.json'):
				print('missing job_info.json')
			if not os.path.isfile(dirPath + '/job_counters.json'):
				print('missing job_counters.info')
			if not os.path.isfile(dirPath + '/tasks_info.json'):
				print('missing tasks_info.json, skipping individual task checks.')
			else:
				# Retrieves all expected task id's
				tasks = retrieveTasksIdsFromTasksInfoFile(dirPath)
				taskMissingCounter = 0
				
				# Validate presence all task-specific files and counts if missing.
				for task in tasks:
					if not os.path.isfile(dirPath + '/' + task + '_info.json'):
						print('missing ' + task + '_info.json')
						taskMissingCounter += 1
					if not os.path.isfile(dirPath + '/' + task + '_counters.json'):
						print('missing ' + task + '_counters.json')
						taskMissingCounter += 1
					if not os.path.isfile(dirPath + '/' + task + '_attempts.json'):
						print('missing ' + task + '_attempts.json')
						taskMissingCounter += 1
					
					# If over 30 missing task-specific files were found, stops looking further.
					if taskMissingCounter > 30:
						print('Founder over 30 missing task files. Skipping rest for this job.')
						break
	
	print(os.linesep + 'Finished validation.')

def retrieveTasksIdsFromTasksInfoFile(dirPath):
	"""
	Name:
		retrieveTasksIdsFromTasksInfoFile
		
	Info:
		Retrieves all task id's that can be found in a tasks_info.json file.
	
	Input:
		dirPath - String: Path to a directory that stores a 'tasks_info.json' file.
	
	Output:
		Json structure generated by the Hadoop REST API and processed by objectpath.Tree().
		See also https://hadoop.apache.org/docs/r2.6.0/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/HistoryServerRest.html
		for more information about the MapReduce History Server REST API's (Hadoop v2.6.0).
	"""
	
	tree = generateTree(dirPath, 'tasks_info.json')
	return list(tree.execute('$.tasks.task.id'))


def generateTree(dirPath, fileName):
	"""
	Name:
		generateTree
		
	Info:
		Generates an objectpath tree from a json file using a directory path and filename.
	
	Input:
		dirPath - String: Path to a directory.
		fileName - String: Name of the json file in the dirPath.
	
	Output:
		Json structure generated by the Hadoop REST API and processed by objectpath.Tree().
		See also https://hadoop.apache.org/docs/r2.6.0/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/HistoryServerRest.html
		for more information about the MapReduce History Server REST API's (Hadoop v2.6.0).
	"""
	
	fullPath = os.path.join(dirPath, fileName)
	return objectpath.Tree(readFileAsJson(fullPath))

def readFileAsJson(fileName):
	"""
	Name:
		readFileAsJson
		
	Info:
		Reads in a file path as Json object.
	
	Input:
		fileName - String: Path to file that should be read.
	"""
	
	with open(fileName) as dataFile:
		return json.load(dataFile)


# Only run main() automatically if this script is executed directly.
if __name__ == '__main__':
	main()
